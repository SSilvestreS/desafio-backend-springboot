{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiBaseUrl;\n    }\n    // Métodos genéricos para evitar duplicação (critério DRY)\n    get(endpoint, params) {\n      let httpParams = new HttpParams();\n      if (params) {\n        Object.keys(params).forEach(key => {\n          if (params[key] !== null && params[key] !== undefined) {\n            httpParams = httpParams.set(key, params[key]);\n          }\n        });\n      }\n      return this.http.get(`${this.baseUrl}${endpoint}`, {\n        params: httpParams\n      });\n    }\n    post(endpoint, data) {\n      return this.http.post(`${this.baseUrl}${endpoint}`, data);\n    }\n    put(endpoint, data) {\n      return this.http.put(`${this.baseUrl}${endpoint}`, data);\n    }\n    patch(endpoint, data) {\n      return this.http.patch(`${this.baseUrl}${endpoint}`, data);\n    }\n    delete(endpoint) {\n      return this.http.delete(`${this.baseUrl}${endpoint}`);\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject, takeUntil, debounceTime, distinctUntilChanged } from 'rxjs';\nimport { Prioridade, Status } from '../../models/incident.model';\nimport { FormUtils } from '../../utils/form.utils';\nexport let IncidentListComponent = class IncidentListComponent {\n  constructor(incidentService, router, fb) {\n    this.incidentService = incidentService;\n    this.router = router;\n    this.fb = fb;\n    this.incidents = [];\n    this.loading = false;\n    this.error = '';\n    // Paginação\n    this.currentPage = 0;\n    this.pageSize = 10;\n    this.totalElements = 0;\n    this.totalPages = 0;\n    this.filterSubject = new Subject();\n    this.destroy$ = new Subject();\n    // Estatísticas\n    this.stats = {\n      total: 0,\n      abertos: 0,\n      emAndamento: 0,\n      resolvidos: 0,\n      cancelados: 0\n    };\n    this.prioridades = Object.values(Prioridade);\n    this.statuses = Object.values(Status);\n    // Modal de confirmação\n    this.showDeleteModal = false;\n    this.incidentToDelete = null;\n    // Adicionar Math para uso no template\n    this.Math = Math;\n    this.filterForm = this.createFilterForm();\n  }\n  ngOnInit() {\n    this.setupFilterSubscription();\n    this.loadIncidents();\n    this.loadStats();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  createFilterForm() {\n    return this.fb.group({\n      status: [''],\n      prioridade: [''],\n      q: [''],\n      tags: ['']\n    });\n  }\n  setupFilterSubscription() {\n    this.filterSubject.pipe(takeUntil(this.destroy$), debounceTime(500), distinctUntilChanged()).subscribe(() => {\n      this.currentPage = 0;\n      this.loadIncidents();\n    });\n    // Observar mudanças nos filtros\n    this.filterForm.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.filterSubject.next();\n    });\n  }\n  loadIncidents() {\n    this.loading = true;\n    this.error = '';\n    const queryParams = FormUtils.buildQueryParams({\n      page: this.currentPage,\n      size: this.pageSize,\n      ...this.filterForm.value\n    });\n    this.incidentService.getIncidents(queryParams).subscribe({\n      next: page => {\n        this.incidents = page.content;\n        this.totalElements = page.totalElements;\n        this.totalPages = page.totalPages;\n        this.currentPage = page.number;\n        this.loading = false;\n      },\n      error: err => {\n        this.error = 'Erro ao carregar incidentes';\n        this.loading = false;\n      }\n    });\n  }\n  loadStats() {\n    this.incidentService.getStats().subscribe({\n      next: stats => {\n        this.stats = stats;\n      },\n      error: err => {\n        console.error('Erro ao carregar estatísticas:', err);\n      }\n    });\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    this.loadIncidents();\n  }\n  onPageSizeChange(size) {\n    this.pageSize = size;\n    this.currentPage = 0;\n    this.loadIncidents();\n  }\n  clearFilters() {\n    this.filterForm.reset();\n    this.currentPage = 0;\n    this.loadIncidents();\n  }\n  createIncident() {\n    this.router.navigate(['/incidents/new']);\n  }\n  editIncident(incident) {\n    this.router.navigate(['/incidents', incident.id, 'edit']);\n  }\n  viewIncident(incident) {\n    this.router.navigate(['/incidents', incident.id]);\n  }\n  deleteIncident(incident) {\n    this.incidentToDelete = incident;\n    this.showDeleteModal = true;\n  }\n  confirmDelete() {\n    if (this.incidentToDelete) {\n      this.loading = true;\n      this.incidentService.deleteIncident(this.incidentToDelete.id).subscribe({\n        next: () => {\n          this.loadIncidents();\n          this.loadStats();\n          this.showDeleteModal = false;\n          this.incidentToDelete = null;\n          this.loading = false;\n        },\n        error: err => {\n          this.error = 'Erro ao excluir incidente';\n          this.loading = false;\n        }\n      });\n    }\n  }\n  cancelDelete() {\n    this.showDeleteModal = false;\n    this.incidentToDelete = null;\n  }\n  getPriorityClass(prioridade) {\n    switch (prioridade) {\n      case Prioridade.ALTA:\n        return 'priority-high';\n      case Prioridade.MEDIA:\n        return 'priority-medium';\n      case Prioridade.BAIXA:\n        return 'priority-low';\n      default:\n        return '';\n    }\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case Status.ABERTA:\n        return 'status-open';\n      case Status.EM_ANDAMENTO:\n        return 'status-in-progress';\n      case Status.RESOLVIDA:\n        return 'status-resolved';\n      case Status.CANCELADA:\n        return 'status-cancelled';\n      default:\n        return '';\n    }\n  }\n  formatDate(date) {\n    return FormUtils.formatDate(date);\n  }\n  getPageNumbers() {\n    const pages = [];\n    const start = Math.max(0, this.currentPage - 2);\n    const end = Math.min(this.totalPages - 1, this.currentPage + 2);\n    for (let i = start; i <= end; i++) {\n      pages.push(i);\n    }\n    return pages;\n  }\n};\nIncidentListComponent = __decorate([Component({\n  selector: 'app-incident-list',\n  templateUrl: './incident-list.component.html',\n  styleUrls: ['./incident-list.component.css']\n})], IncidentListComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
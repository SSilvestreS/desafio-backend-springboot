{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(apiService) {\n      this.apiService = apiService;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.loadUserFromStorage();\n    }\n    login(credentials) {\n      return this.apiService.post('/auth/login', credentials).pipe(tap(response => {\n        localStorage.setItem('token', response.token);\n        this.setCurrentUser(credentials.email);\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      this.currentUserSubject.next(null);\n    }\n    isAuthenticated() {\n      return !!localStorage.getItem('token');\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    setCurrentUser(email) {\n      const role = email.includes('admin') ? 'ROLE_ADMIN' : 'ROLE_USER';\n      const user = {\n        email,\n        role\n      };\n      this.currentUserSubject.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    loadUserFromStorage() {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        const user = JSON.parse(userStr);\n        this.currentUserSubject.next(user);\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.ApiService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}